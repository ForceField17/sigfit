// Generated by rstantools.  Do not edit by hand.

/*
    sigfit is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    sigfit is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with sigfit.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_sigfit_ext_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sigfit_ext");
    reader.add_event(1, 1, "include", "/include/common_functions.stan");
    reader.add_event(1, 0, "start", "/include/common_functions.stan");
    reader.add_event(70, 69, "end", "/include/common_functions.stan");
    reader.add_event(70, 2, "restart", "model_sigfit_ext");
    reader.add_event(198, 128, "end", "model_sigfit_ext");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
scale_to_sum_1(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 3;
        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(v, sum(v)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct scale_to_sum_1_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) const {
        return scale_to_sum_1(v, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1, Eigen::Dynamic>
scale_row_to_sum_1(const Eigen::Matrix<T0__, 1, Eigen::Dynamic>& r, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(r, sum(r)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct scale_row_to_sum_1_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1, Eigen::Dynamic>& r, std::ostream* pstream__) const {
        return scale_row_to_sum_1(r, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
array_to_matrix(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 19;
        validate_non_negative_index("y", "size(x)", size(x));
        validate_non_negative_index("y", "rows(get_base1(x, 1, \"x\", 1))", rows(get_base1(x, 1, "x", 1)));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> y(size(x), rows(get_base1(x, 1, "x", 1)));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);


        current_statement_begin__ = 20;
        for (int m = 1; m <= size(x); ++m) {
            current_statement_begin__ = 21;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                        transpose(get_base1(x, m, "x", 1)), 
                        "assigning variable y");
        }
        current_statement_begin__ = 22;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct array_to_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<Eigen::Matrix<T0__, Eigen::Dynamic, 1> >& x, std::ostream* pstream__) const {
        return array_to_matrix(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
stick_breaking(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 32;
        int C(0);
        (void) C;  // dummy to suppress unused var warning
        stan::math::fill(C, std::numeric_limits<int>::min());
        stan::math::assign(C,num_elements(v));

        current_statement_begin__ = 33;
        validate_non_negative_index("pi", "C", C);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pi(C);
        stan::math::initialize(pi, DUMMY_VAR__);
        stan::math::fill(pi, DUMMY_VAR__);
        stan::math::assign(pi,rep_vector(0, C));


        current_statement_begin__ = 34;
        stan::model::assign(pi, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    get_base1(v, 1, "v", 1), 
                    "assigning variable pi");
        current_statement_begin__ = 35;
        for (int j = 2; j <= C; ++j) {

            current_statement_begin__ = 36;
            stan::model::assign(pi, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        (((get_base1(v, j, "v", 1) * (1 - get_base1(v, (j - 1), "v", 1))) * get_base1(pi, (j - 1), "pi", 1)) / get_base1(v, (j - 1), "v", 1)), 
                        "assigning variable pi");
        }
        current_statement_begin__ = 38;
        return stan::math::promote_scalar<fun_return_scalar_t__>(scale_to_sum_1(pi, pstream__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct stick_breaking_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v, std::ostream* pstream__) const {
        return stick_breaking(v, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
build_exposures_from_sticks_and_fixed(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& sticks,
                                          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& fixed, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 55;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,(num_elements(sticks) - 1));

        current_statement_begin__ = 56;
        int S(0);
        (void) S;  // dummy to suppress unused var warning
        stan::math::fill(S, std::numeric_limits<int>::min());
        stan::math::assign(S,num_elements(fixed));

        current_statement_begin__ = 57;
        int T(0);
        (void) T;  // dummy to suppress unused var warning
        stan::math::fill(T, std::numeric_limits<int>::min());
        stan::math::assign(T,(N + S));

        current_statement_begin__ = 58;
        validate_non_negative_index("dpp_weights", "(N + 1)", (N + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> dpp_weights((N + 1));
        stan::math::initialize(dpp_weights, DUMMY_VAR__);
        stan::math::fill(dpp_weights, DUMMY_VAR__);

        current_statement_begin__ = 59;
        validate_non_negative_index("fixed_weights", "S", S);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fixed_weights(S);
        stan::math::initialize(fixed_weights, DUMMY_VAR__);
        stan::math::fill(fixed_weights, DUMMY_VAR__);

        current_statement_begin__ = 60;
        validate_non_negative_index("exposures", "T", T);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> exposures(T);
        stan::math::initialize(exposures, DUMMY_VAR__);
        stan::math::fill(exposures, DUMMY_VAR__);


        current_statement_begin__ = 61;
        stan::math::assign(dpp_weights, stick_breaking(sticks, pstream__));
        current_statement_begin__ = 62;
        stan::math::assign(fixed_weights, multiply(get_base1(dpp_weights, 1, "dpp_weights", 1), fixed));
        current_statement_begin__ = 65;
        stan::model::assign(exposures, 
                    stan::model::cons_list(stan::model::index_min_max(1, S), stan::model::nil_index_list()), 
                    fixed_weights, 
                    "assigning variable exposures");
        current_statement_begin__ = 66;
        stan::model::assign(exposures, 
                    stan::model::cons_list(stan::model::index_min_max((S + 1), T), stan::model::nil_index_list()), 
                    stan::model::rvalue(dpp_weights, stan::model::cons_list(stan::model::index_min_max(2, (N + 1)), stan::model::nil_index_list()), "dpp_weights"), 
                    "assigning variable exposures");
        current_statement_begin__ = 69;
        return stan::math::promote_scalar<fun_return_scalar_t__>(scale_to_sum_1(exposures, pstream__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct build_exposures_from_sticks_and_fixed_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& sticks,
                                          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& fixed, std::ostream* pstream__) const {
        return build_exposures_from_sticks_and_fixed(sticks, fixed, pstream__);
    }
};

#include <stan_meta_header.hpp>
 class model_sigfit_ext : public prob_grad {
private:
        int family;
        int C;
        int S;
        int G;
        std::vector<std::vector<int> > counts_int;
        std::vector<std::vector<double> > counts_real;
        matrix_d opportunities;
        vector_d kappa;
        matrix_d alpha;
        int dpp;
        double concentration;
        int G_mult;
        int C_phi;
        int G_sigma;
        int G_dpp;
public:
    model_sigfit_ext(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_sigfit_ext(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_sigfit_ext_namespace::model_sigfit_ext";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "family", "int", context__.to_vec());
            family = int(0);
            vals_i__ = context__.vals_i("family");
            pos__ = 0;
            family = vals_i__[pos__++];
            check_greater_or_equal(function__, "family", family, 1);
            check_less_or_equal(function__, "family", family, 4);

            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "C", "int", context__.to_vec());
            C = int(0);
            vals_i__ = context__.vals_i("C");
            pos__ = 0;
            C = vals_i__[pos__++];
            check_greater_or_equal(function__, "C", C, 1);

            current_statement_begin__ = 76;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 1);

            current_statement_begin__ = 77;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            check_greater_or_equal(function__, "G", G, 1);

            current_statement_begin__ = 78;
            validate_non_negative_index("counts_int", "G", G);
            validate_non_negative_index("counts_int", "C", C);
            context__.validate_dims("data initialization", "counts_int", "int", context__.to_vec(G,C));
            counts_int = std::vector<std::vector<int> >(G, std::vector<int>(C, int(0)));
            vals_i__ = context__.vals_i("counts_int");
            pos__ = 0;
            size_t counts_int_k_0_max__ = G;
            size_t counts_int_k_1_max__ = C;
            for (size_t k_1__ = 0; k_1__ < counts_int_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_int_k_0_max__; ++k_0__) {
                    counts_int[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 79;
            validate_non_negative_index("counts_real", "G", G);
            validate_non_negative_index("counts_real", "C", C);
            context__.validate_dims("data initialization", "counts_real", "double", context__.to_vec(G,C));
            counts_real = std::vector<std::vector<double> >(G, std::vector<double>(C, double(0)));
            vals_r__ = context__.vals_r("counts_real");
            pos__ = 0;
            size_t counts_real_k_0_max__ = G;
            size_t counts_real_k_1_max__ = C;
            for (size_t k_1__ = 0; k_1__ < counts_real_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_real_k_0_max__; ++k_0__) {
                    counts_real[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 80;
            validate_non_negative_index("opportunities", "G", G);
            validate_non_negative_index("opportunities", "C", C);
            context__.validate_dims("data initialization", "opportunities", "matrix_d", context__.to_vec(G,C));
            opportunities = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(G, C);
            vals_r__ = context__.vals_r("opportunities");
            pos__ = 0;
            size_t opportunities_j_2_max__ = C;
            size_t opportunities_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < opportunities_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < opportunities_j_1_max__; ++j_1__) {
                    opportunities(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 81;
            validate_non_negative_index("kappa", "S", S);
            context__.validate_dims("data initialization", "kappa", "vector_d", context__.to_vec(S));
            kappa = Eigen::Matrix<double, Eigen::Dynamic, 1>(S);
            vals_r__ = context__.vals_r("kappa");
            pos__ = 0;
            size_t kappa_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < kappa_j_1_max__; ++j_1__) {
                kappa(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "kappa", kappa, 0);

            current_statement_begin__ = 82;
            validate_non_negative_index("alpha", "S", S);
            validate_non_negative_index("alpha", "C", C);
            context__.validate_dims("data initialization", "alpha", "matrix_d", context__.to_vec(S,C));
            alpha = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(S, C);
            vals_r__ = context__.vals_r("alpha");
            pos__ = 0;
            size_t alpha_j_2_max__ = C;
            size_t alpha_j_1_max__ = S;
            for (size_t j_2__ = 0; j_2__ < alpha_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    alpha(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "dpp", "int", context__.to_vec());
            dpp = int(0);
            vals_i__ = context__.vals_i("dpp");
            pos__ = 0;
            dpp = vals_i__[pos__++];
            check_greater_or_equal(function__, "dpp", dpp, 0);
            check_less_or_equal(function__, "dpp", dpp, 1);

            current_statement_begin__ = 84;
            context__.validate_dims("data initialization", "concentration", "double", context__.to_vec());
            concentration = double(0);
            vals_r__ = context__.vals_r("concentration");
            pos__ = 0;
            concentration = vals_r__[pos__++];
            check_greater_or_equal(function__, "concentration", concentration, 0);


            // initialize transformed data variables
            current_statement_begin__ = 90;
            G_mult = int(0);
            stan::math::fill(G_mult, std::numeric_limits<int>::min());
            stan::math::assign(G_mult,(logical_neq(family, 1) ? G : 0 ));

            current_statement_begin__ = 91;
            C_phi = int(0);
            stan::math::fill(C_phi, std::numeric_limits<int>::min());
            stan::math::assign(C_phi,(logical_eq(family, 3) ? C : 0 ));

            current_statement_begin__ = 92;
            G_sigma = int(0);
            stan::math::fill(G_sigma, std::numeric_limits<int>::min());
            stan::math::assign(G_sigma,(logical_eq(family, 4) ? G : 0 ));

            current_statement_begin__ = 93;
            G_dpp = int(0);
            stan::math::fill(G_dpp, std::numeric_limits<int>::min());
            stan::math::assign(G_dpp,(logical_eq(dpp, 1) ? G : 0 ));

            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 97;
            validate_non_negative_index("signatures", "C", C);
            validate_non_negative_index("signatures", "S", S);
            num_params_r__ += ((C - 1) * S);
            current_statement_begin__ = 98;
            validate_non_negative_index("exposures_raw", "S", S);
            validate_non_negative_index("exposures_raw", "G", G);
            num_params_r__ += ((S - 1) * G);
            current_statement_begin__ = 99;
            validate_non_negative_index("multiplier", "G_mult", G_mult);
            num_params_r__ += (1 * G_mult);
            current_statement_begin__ = 100;
            validate_non_negative_index("sigma", "G_sigma", G_sigma);
            num_params_r__ += G_sigma;
            current_statement_begin__ = 101;
            validate_non_negative_index("phi", "C_phi", C_phi);
            num_params_r__ += C_phi;
            current_statement_begin__ = 102;
            validate_non_negative_index("dp_alpha", "G_dpp", G_dpp);
            num_params_r__ += (1 * G_dpp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_sigfit_ext() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 97;
        if (!(context__.contains_r("signatures")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable signatures missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("signatures");
        pos__ = 0U;
        validate_non_negative_index("signatures", "C", C);
        validate_non_negative_index("signatures", "S", S);
        context__.validate_dims("parameter initialization", "signatures", "vector_d", context__.to_vec(S,C));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > signatures(S, Eigen::Matrix<double, Eigen::Dynamic, 1>(C));
        size_t signatures_j_1_max__ = C;
        size_t signatures_k_0_max__ = S;
        for (size_t j_1__ = 0; j_1__ < signatures_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < signatures_k_0_max__; ++k_0__) {
                signatures[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t signatures_i_0_max__ = S;
        for (size_t i_0__ = 0; i_0__ < signatures_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(signatures[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable signatures: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 98;
        if (!(context__.contains_r("exposures_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable exposures_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("exposures_raw");
        pos__ = 0U;
        validate_non_negative_index("exposures_raw", "S", S);
        validate_non_negative_index("exposures_raw", "G", G);
        context__.validate_dims("parameter initialization", "exposures_raw", "vector_d", context__.to_vec(G,S));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > exposures_raw(G, Eigen::Matrix<double, Eigen::Dynamic, 1>(S));
        size_t exposures_raw_j_1_max__ = S;
        size_t exposures_raw_k_0_max__ = G;
        for (size_t j_1__ = 0; j_1__ < exposures_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < exposures_raw_k_0_max__; ++k_0__) {
                exposures_raw[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t exposures_raw_i_0_max__ = G;
        for (size_t i_0__ = 0; i_0__ < exposures_raw_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(exposures_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable exposures_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 99;
        if (!(context__.contains_r("multiplier")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable multiplier missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("multiplier");
        pos__ = 0U;
        validate_non_negative_index("multiplier", "G_mult", G_mult);
        context__.validate_dims("parameter initialization", "multiplier", "double", context__.to_vec(G_mult));
        std::vector<double> multiplier(G_mult, double(0));
        size_t multiplier_k_0_max__ = G_mult;
        for (size_t k_0__ = 0; k_0__ < multiplier_k_0_max__; ++k_0__) {
            multiplier[k_0__] = vals_r__[pos__++];
        }
        size_t multiplier_i_0_max__ = G_mult;
        for (size_t i_0__ = 0; i_0__ < multiplier_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, multiplier[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable multiplier: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 100;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "G_sigma", G_sigma);
        context__.validate_dims("parameter initialization", "sigma", "vector_d", context__.to_vec(G_sigma));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(G_sigma);
        size_t sigma_j_1_max__ = G_sigma;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 101;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "C_phi", C_phi);
        context__.validate_dims("parameter initialization", "phi", "vector_d", context__.to_vec(C_phi));
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi(C_phi);
        size_t phi_j_1_max__ = C_phi;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 102;
        if (!(context__.contains_r("dp_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable dp_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("dp_alpha");
        pos__ = 0U;
        validate_non_negative_index("dp_alpha", "G_dpp", G_dpp);
        context__.validate_dims("parameter initialization", "dp_alpha", "double", context__.to_vec(G_dpp));
        std::vector<double> dp_alpha(G_dpp, double(0));
        size_t dp_alpha_k_0_max__ = G_dpp;
        for (size_t k_0__ = 0; k_0__ < dp_alpha_k_0_max__; ++k_0__) {
            dp_alpha[k_0__] = vals_r__[pos__++];
        }
        size_t dp_alpha_i_0_max__ = G_dpp;
        for (size_t i_0__ = 0; i_0__ < dp_alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, dp_alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable dp_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 97;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > signatures;
            size_t signatures_d_0_max__ = S;
            signatures.reserve(signatures_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < signatures_d_0_max__; ++d_0__) {
                if (jacobian__)
                    signatures.push_back(in__.simplex_constrain(C, lp__));
                else
                    signatures.push_back(in__.simplex_constrain(C));
            }

            current_statement_begin__ = 98;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > exposures_raw;
            size_t exposures_raw_d_0_max__ = G;
            exposures_raw.reserve(exposures_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < exposures_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    exposures_raw.push_back(in__.simplex_constrain(S, lp__));
                else
                    exposures_raw.push_back(in__.simplex_constrain(S));
            }

            current_statement_begin__ = 99;
            std::vector<local_scalar_t__> multiplier;
            size_t multiplier_d_0_max__ = G_mult;
            multiplier.reserve(multiplier_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < multiplier_d_0_max__; ++d_0__) {
                if (jacobian__)
                    multiplier.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    multiplier.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 100;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0, G_sigma, lp__);
            else
                sigma = in__.vector_lb_constrain(0, G_sigma);

            current_statement_begin__ = 101;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.vector_lb_constrain(0, C_phi, lp__);
            else
                phi = in__.vector_lb_constrain(0, C_phi);

            current_statement_begin__ = 102;
            std::vector<local_scalar_t__> dp_alpha;
            size_t dp_alpha_d_0_max__ = G_dpp;
            dp_alpha.reserve(dp_alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < dp_alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    dp_alpha.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    dp_alpha.push_back(in__.scalar_lb_constrain(0));
            }

            // transformed parameters
            current_statement_begin__ = 106;
            validate_non_negative_index("activities", "G", G);
            validate_non_negative_index("activities", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> activities(G, S);
            stan::math::initialize(activities, DUMMY_VAR__);
            stan::math::fill(activities, DUMMY_VAR__);

            current_statement_begin__ = 107;
            validate_non_negative_index("expected_counts", "G", G);
            validate_non_negative_index("expected_counts", "C", C);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> expected_counts(G, C);
            stan::math::initialize(expected_counts, DUMMY_VAR__);
            stan::math::fill(expected_counts, DUMMY_VAR__);

            current_statement_begin__ = 108;
            validate_non_negative_index("exposures", "S", S);
            validate_non_negative_index("exposures", "G", G);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > exposures(G, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(S));
            stan::math::initialize(exposures, DUMMY_VAR__);
            stan::math::fill(exposures, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 109;
            if (as_bool(logical_eq(dpp, 1))) {

                current_statement_begin__ = 110;
                for (int g = 1; g <= G; ++g) {

                    current_statement_begin__ = 111;
                    stan::model::assign(exposures, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                                stick_breaking(get_base1(exposures_raw, g, "exposures_raw", 1), pstream__), 
                                "assigning variable exposures");
                }
            } else {

                current_statement_begin__ = 115;
                stan::math::assign(exposures, exposures_raw);
            }
            current_statement_begin__ = 119;
            if (as_bool(logical_eq(family, 1))) {

                current_statement_begin__ = 121;
                stan::math::assign(activities, array_to_matrix(exposures, pstream__));
            } else if (as_bool((primitive_value(logical_eq(family, 2)) || primitive_value(logical_eq(family, 3))))) {

                current_statement_begin__ = 124;
                for (int g = 1; g <= G; ++g) {

                    current_statement_begin__ = 125;
                    stan::model::assign(activities, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                                multiply(multiply(transpose(get_base1(exposures, g, "exposures", 1)), sum(get_base1(counts_int, g, "counts_int", 1))), get_base1(multiplier, g, "multiplier", 1)), 
                                "assigning variable activities");
                }
            } else {

                current_statement_begin__ = 129;
                for (int g = 1; g <= G; ++g) {

                    current_statement_begin__ = 130;
                    stan::model::assign(activities, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                                multiply(multiply(transpose(get_base1(exposures, g, "exposures", 1)), sum(get_base1(counts_real, g, "counts_real", 1))), get_base1(multiplier, g, "multiplier", 1)), 
                                "assigning variable activities");
                }
            }
            current_statement_begin__ = 134;
            stan::math::assign(expected_counts, elt_multiply(multiply(activities, array_to_matrix(signatures, pstream__)), opportunities));
            current_statement_begin__ = 135;
            if (as_bool(logical_eq(family, 1))) {

                current_statement_begin__ = 137;
                for (int g = 1; g <= G; ++g) {

                    current_statement_begin__ = 138;
                    stan::model::assign(expected_counts, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                                scale_row_to_sum_1(get_base1(expected_counts, g, "expected_counts", 1), pstream__), 
                                "assigning variable expected_counts");
                }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 106;
            size_t activities_j_1_max__ = G;
            size_t activities_j_2_max__ = S;
            for (size_t j_1__ = 0; j_1__ < activities_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < activities_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(activities(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: activities" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable activities: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "activities", activities, 0);

            current_statement_begin__ = 107;
            size_t expected_counts_j_1_max__ = G;
            size_t expected_counts_j_2_max__ = C;
            for (size_t j_1__ = 0; j_1__ < expected_counts_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < expected_counts_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(expected_counts(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: expected_counts" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable expected_counts: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 108;
            size_t exposures_k_0_max__ = G;
            size_t exposures_j_1_max__ = S;
            for (size_t k_0__ = 0; k_0__ < exposures_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < exposures_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(exposures[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: exposures" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable exposures: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t exposures_i_0_max__ = G;
            for (size_t i_0__ = 0; i_0__ < exposures_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "exposures[i_0__]", exposures[i_0__]);
            }


            // model body

            current_statement_begin__ = 144;
            if (as_bool(logical_eq(dpp, 1))) {

                current_statement_begin__ = 145;
                lp_accum__.add(gamma_log<propto__>(dp_alpha, concentration, 1));
            }
            current_statement_begin__ = 149;
            for (int g = 1; g <= G; ++g) {

                current_statement_begin__ = 150;
                if (as_bool(logical_eq(dpp, 1))) {

                    current_statement_begin__ = 151;
                    lp_accum__.add(beta_log<propto__>(get_base1(exposures_raw, g, "exposures_raw", 1), 1, get_base1(dp_alpha, g, "dp_alpha", 1)));
                } else {

                    current_statement_begin__ = 154;
                    lp_accum__.add(dirichlet_log<propto__>(get_base1(exposures_raw, g, "exposures_raw", 1), kappa));
                }
            }
            current_statement_begin__ = 158;
            for (int s = 1; s <= S; ++s) {

                current_statement_begin__ = 160;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(signatures, s, "signatures", 1), transpose(get_base1(alpha, s, "alpha", 1))));
            }
            current_statement_begin__ = 164;
            if (as_bool(logical_eq(family, 1))) {

                current_statement_begin__ = 165;
                for (int g = 1; g <= G; ++g) {

                    current_statement_begin__ = 166;
                    lp_accum__.add(multinomial_log<propto__>(get_base1(counts_int, g, "counts_int", 1), transpose(get_base1(expected_counts, g, "expected_counts", 1))));
                }
            } else {

                current_statement_begin__ = 171;
                lp_accum__.add(cauchy_log<propto__>(multiplier, 0, 2.5));
                current_statement_begin__ = 174;
                if (as_bool(logical_eq(family, 2))) {

                    current_statement_begin__ = 175;
                    for (int g = 1; g <= G; ++g) {

                        current_statement_begin__ = 176;
                        lp_accum__.add(poisson_log<propto__>(get_base1(counts_int, g, "counts_int", 1), get_base1(expected_counts, g, "expected_counts", 1)));
                    }
                } else if (as_bool(logical_eq(family, 3))) {

                    current_statement_begin__ = 182;
                    lp_accum__.add(cauchy_log<propto__>(phi, 0, 2.5));
                    current_statement_begin__ = 183;
                    for (int g = 1; g <= G; ++g) {

                        current_statement_begin__ = 184;
                        lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(counts_int, g, "counts_int", 1), get_base1(expected_counts, g, "expected_counts", 1), phi));
                    }
                } else {

                    current_statement_begin__ = 190;
                    lp_accum__.add(cauchy_log<propto__>(sigma, 0, 2.5));
                    current_statement_begin__ = 191;
                    for (int g = 1; g <= G; ++g) {

                        current_statement_begin__ = 192;
                        lp_accum__.add(normal_log<propto__>(get_base1(counts_real, g, "counts_real", 1), get_base1(expected_counts, g, "expected_counts", 1), get_base1(sigma, g, "sigma", 1)));
                    }
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("signatures");
        names__.push_back("exposures_raw");
        names__.push_back("multiplier");
        names__.push_back("sigma");
        names__.push_back("phi");
        names__.push_back("dp_alpha");
        names__.push_back("activities");
        names__.push_back("expected_counts");
        names__.push_back("exposures");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G_mult);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G_sigma);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C_phi);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G_dpp);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(S);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_sigfit_ext_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > signatures;
        size_t signatures_d_0_max__ = S;
        signatures.reserve(signatures_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < signatures_d_0_max__; ++d_0__) {
            signatures.push_back(in__.simplex_constrain(C));
        }
        size_t signatures_j_1_max__ = C;
        size_t signatures_k_0_max__ = S;
        for (size_t j_1__ = 0; j_1__ < signatures_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < signatures_k_0_max__; ++k_0__) {
                vars__.push_back(signatures[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > exposures_raw;
        size_t exposures_raw_d_0_max__ = G;
        exposures_raw.reserve(exposures_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < exposures_raw_d_0_max__; ++d_0__) {
            exposures_raw.push_back(in__.simplex_constrain(S));
        }
        size_t exposures_raw_j_1_max__ = S;
        size_t exposures_raw_k_0_max__ = G;
        for (size_t j_1__ = 0; j_1__ < exposures_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < exposures_raw_k_0_max__; ++k_0__) {
                vars__.push_back(exposures_raw[k_0__](j_1__));
            }
        }

        std::vector<double> multiplier;
        size_t multiplier_d_0_max__ = G_mult;
        multiplier.reserve(multiplier_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < multiplier_d_0_max__; ++d_0__) {
            multiplier.push_back(in__.scalar_lb_constrain(0));
        }
        size_t multiplier_k_0_max__ = G_mult;
        for (size_t k_0__ = 0; k_0__ < multiplier_k_0_max__; ++k_0__) {
            vars__.push_back(multiplier[k_0__]);
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma = in__.vector_lb_constrain(0, G_sigma);
        size_t sigma_j_1_max__ = G_sigma;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            vars__.push_back(sigma(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> phi = in__.vector_lb_constrain(0, C_phi);
        size_t phi_j_1_max__ = C_phi;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            vars__.push_back(phi(j_1__));
        }

        std::vector<double> dp_alpha;
        size_t dp_alpha_d_0_max__ = G_dpp;
        dp_alpha.reserve(dp_alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < dp_alpha_d_0_max__; ++d_0__) {
            dp_alpha.push_back(in__.scalar_lb_constrain(0));
        }
        size_t dp_alpha_k_0_max__ = G_dpp;
        for (size_t k_0__ = 0; k_0__ < dp_alpha_k_0_max__; ++k_0__) {
            vars__.push_back(dp_alpha[k_0__]);
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 106;
            validate_non_negative_index("activities", "G", G);
            validate_non_negative_index("activities", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> activities(G, S);
            stan::math::initialize(activities, DUMMY_VAR__);
            stan::math::fill(activities, DUMMY_VAR__);

            current_statement_begin__ = 107;
            validate_non_negative_index("expected_counts", "G", G);
            validate_non_negative_index("expected_counts", "C", C);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> expected_counts(G, C);
            stan::math::initialize(expected_counts, DUMMY_VAR__);
            stan::math::fill(expected_counts, DUMMY_VAR__);

            current_statement_begin__ = 108;
            validate_non_negative_index("exposures", "S", S);
            validate_non_negative_index("exposures", "G", G);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > exposures(G, Eigen::Matrix<double, Eigen::Dynamic, 1>(S));
            stan::math::initialize(exposures, DUMMY_VAR__);
            stan::math::fill(exposures, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 109;
            if (as_bool(logical_eq(dpp, 1))) {

                current_statement_begin__ = 110;
                for (int g = 1; g <= G; ++g) {

                    current_statement_begin__ = 111;
                    stan::model::assign(exposures, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                                stick_breaking(get_base1(exposures_raw, g, "exposures_raw", 1), pstream__), 
                                "assigning variable exposures");
                }
            } else {

                current_statement_begin__ = 115;
                stan::math::assign(exposures, exposures_raw);
            }
            current_statement_begin__ = 119;
            if (as_bool(logical_eq(family, 1))) {

                current_statement_begin__ = 121;
                stan::math::assign(activities, array_to_matrix(exposures, pstream__));
            } else if (as_bool((primitive_value(logical_eq(family, 2)) || primitive_value(logical_eq(family, 3))))) {

                current_statement_begin__ = 124;
                for (int g = 1; g <= G; ++g) {

                    current_statement_begin__ = 125;
                    stan::model::assign(activities, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                                multiply(multiply(transpose(get_base1(exposures, g, "exposures", 1)), sum(get_base1(counts_int, g, "counts_int", 1))), get_base1(multiplier, g, "multiplier", 1)), 
                                "assigning variable activities");
                }
            } else {

                current_statement_begin__ = 129;
                for (int g = 1; g <= G; ++g) {

                    current_statement_begin__ = 130;
                    stan::model::assign(activities, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                                multiply(multiply(transpose(get_base1(exposures, g, "exposures", 1)), sum(get_base1(counts_real, g, "counts_real", 1))), get_base1(multiplier, g, "multiplier", 1)), 
                                "assigning variable activities");
                }
            }
            current_statement_begin__ = 134;
            stan::math::assign(expected_counts, elt_multiply(multiply(activities, array_to_matrix(signatures, pstream__)), opportunities));
            current_statement_begin__ = 135;
            if (as_bool(logical_eq(family, 1))) {

                current_statement_begin__ = 137;
                for (int g = 1; g <= G; ++g) {

                    current_statement_begin__ = 138;
                    stan::model::assign(expected_counts, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                                scale_row_to_sum_1(get_base1(expected_counts, g, "expected_counts", 1), pstream__), 
                                "assigning variable expected_counts");
                }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 106;
            check_greater_or_equal(function__, "activities", activities, 0);

            current_statement_begin__ = 108;
            size_t exposures_i_0_max__ = G;
            for (size_t i_0__ = 0; i_0__ < exposures_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "exposures[i_0__]", exposures[i_0__]);
            }

            // write transformed parameters
            if (include_tparams__) {
                size_t activities_j_2_max__ = S;
                size_t activities_j_1_max__ = G;
                for (size_t j_2__ = 0; j_2__ < activities_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < activities_j_1_max__; ++j_1__) {
                        vars__.push_back(activities(j_1__, j_2__));
                    }
                }
                size_t expected_counts_j_2_max__ = C;
                size_t expected_counts_j_1_max__ = G;
                for (size_t j_2__ = 0; j_2__ < expected_counts_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < expected_counts_j_1_max__; ++j_1__) {
                        vars__.push_back(expected_counts(j_1__, j_2__));
                    }
                }
                size_t exposures_j_1_max__ = S;
                size_t exposures_k_0_max__ = G;
                for (size_t j_1__ = 0; j_1__ < exposures_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < exposures_k_0_max__; ++k_0__) {
                        vars__.push_back(exposures[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_sigfit_ext";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t signatures_j_1_max__ = C;
        size_t signatures_k_0_max__ = S;
        for (size_t j_1__ = 0; j_1__ < signatures_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < signatures_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "signatures" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t exposures_raw_j_1_max__ = S;
        size_t exposures_raw_k_0_max__ = G;
        for (size_t j_1__ = 0; j_1__ < exposures_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < exposures_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t multiplier_k_0_max__ = G_mult;
        for (size_t k_0__ = 0; k_0__ < multiplier_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "multiplier" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_j_1_max__ = G_sigma;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = C_phi;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dp_alpha_k_0_max__ = G_dpp;
        for (size_t k_0__ = 0; k_0__ < dp_alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dp_alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t activities_j_2_max__ = S;
            size_t activities_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < activities_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < activities_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "activities" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t expected_counts_j_2_max__ = C;
            size_t expected_counts_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < expected_counts_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < expected_counts_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "expected_counts" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t exposures_j_1_max__ = S;
            size_t exposures_k_0_max__ = G;
            for (size_t j_1__ = 0; j_1__ < exposures_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < exposures_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "exposures" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t signatures_j_1_max__ = (C - 1);
        size_t signatures_k_0_max__ = S;
        for (size_t j_1__ = 0; j_1__ < signatures_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < signatures_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "signatures" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t exposures_raw_j_1_max__ = (S - 1);
        size_t exposures_raw_k_0_max__ = G;
        for (size_t j_1__ = 0; j_1__ < exposures_raw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < exposures_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures_raw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t multiplier_k_0_max__ = G_mult;
        for (size_t k_0__ = 0; k_0__ < multiplier_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "multiplier" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_j_1_max__ = G_sigma;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = C_phi;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dp_alpha_k_0_max__ = G_dpp;
        for (size_t k_0__ = 0; k_0__ < dp_alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dp_alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t activities_j_2_max__ = S;
            size_t activities_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < activities_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < activities_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "activities" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t expected_counts_j_2_max__ = C;
            size_t expected_counts_j_1_max__ = G;
            for (size_t j_2__ = 0; j_2__ < expected_counts_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < expected_counts_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "expected_counts" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t exposures_j_1_max__ = (S - 1);
            size_t exposures_k_0_max__ = G;
            for (size_t j_1__ = 0; j_1__ < exposures_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < exposures_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "exposures" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_sigfit_ext_namespace::model_sigfit_ext stan_model;


#endif

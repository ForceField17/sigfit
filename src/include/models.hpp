
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_sigfit_ext_emu_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sigfit_ext_emu");
    reader.add_event(55, 55, "end", "model_sigfit_ext_emu");
    return reader;
}

class model_sigfit_ext_emu : public prob_grad {
private:
    int N;
    int M;
    int n;
    vector<vector<int> > counts;
    matrix_d opps;
    vector_d alpha;
public:
    model_sigfit_ext_emu(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_sigfit_ext_emu(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_sigfit_ext_emu_namespace::model_sigfit_ext_emu";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "M", "int", context__.to_vec());
        M = int(0);
        vals_i__ = context__.vals_i("M");
        pos__ = 0;
        M = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n", "int", context__.to_vec());
        n = int(0);
        vals_i__ = context__.vals_i("n");
        pos__ = 0;
        n = vals_i__[pos__++];
        validate_non_negative_index("counts", "M", M);
        validate_non_negative_index("counts", "N", N);
        context__.validate_dims("data initialization", "counts", "int", context__.to_vec(M,N));
        validate_non_negative_index("counts", "M", M);
        validate_non_negative_index("counts", "N", N);
        counts = std::vector<std::vector<int> >(M,std::vector<int>(N,int(0)));
        vals_i__ = context__.vals_i("counts");
        pos__ = 0;
        size_t counts_limit_1__ = N;
        for (size_t i_1__ = 0; i_1__ < counts_limit_1__; ++i_1__) {
            size_t counts_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < counts_limit_0__; ++i_0__) {
                counts[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        validate_non_negative_index("opps", "M", M);
        validate_non_negative_index("opps", "N", N);
        context__.validate_dims("data initialization", "opps", "matrix_d", context__.to_vec(M,N));
        validate_non_negative_index("opps", "M", M);
        validate_non_negative_index("opps", "N", N);
        opps = matrix_d(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>(N));
        vals_r__ = context__.vals_r("opps");
        pos__ = 0;
        size_t opps_m_mat_lim__ = M;
        size_t opps_n_mat_lim__ = N;
        for (size_t n_mat__ = 0; n_mat__ < opps_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < opps_m_mat_lim__; ++m_mat__) {
                opps(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        // initialize data variables
        validate_non_negative_index("alpha", "N", N);
        alpha = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        stan::math::fill(alpha,DUMMY_VAR__);

        try {
            for (int j = 1; j <= N; ++j) {

                stan::math::assign(get_base1_lhs(alpha,j,"alpha",1), 1);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("signatures", "N", N);
        validate_non_negative_index("signatures", "n", n);
        num_params_r__ += (N - 1) * n;
        validate_non_negative_index("exposures", "M", M);
        validate_non_negative_index("exposures", "n", n);
        num_params_r__ += M * n;
    }

    ~model_sigfit_ext_emu() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("signatures")))
            throw std::runtime_error("variable signatures missing");
        vals_r__ = context__.vals_r("signatures");
        pos__ = 0U;
        validate_non_negative_index("signatures", "n", n);
        validate_non_negative_index("signatures", "N", N);
        context__.validate_dims("initialization", "signatures", "vector_d", context__.to_vec(n,N));
        // generate_declaration signatures
        std::vector<vector_d> signatures(n,vector_d(static_cast<Eigen::VectorXd::Index>(N)));
        for (int j1__ = 0U; j1__ < N; ++j1__)
            for (int i0__ = 0U; i0__ < n; ++i0__)
                signatures[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n; ++i0__)
            try {
            writer__.simplex_unconstrain(signatures[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable signatures: ") + e.what());
        }

        if (!(context__.contains_r("exposures")))
            throw std::runtime_error("variable exposures missing");
        vals_r__ = context__.vals_r("exposures");
        pos__ = 0U;
        validate_non_negative_index("exposures", "M", M);
        validate_non_negative_index("exposures", "n", n);
        context__.validate_dims("initialization", "exposures", "matrix_d", context__.to_vec(M,n));
        // generate_declaration exposures
        matrix_d exposures(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>(n));
        for (int j2__ = 0U; j2__ < n; ++j2__)
            for (int j1__ = 0U; j1__ < M; ++j1__)
                exposures(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_lb_unconstrain(0,exposures);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable exposures: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > signatures;
        size_t dim_signatures_0__ = n;
        signatures.reserve(dim_signatures_0__);
        for (size_t k_0__ = 0; k_0__ < dim_signatures_0__; ++k_0__) {
            if (jacobian__)
                signatures.push_back(in__.simplex_constrain(N,lp__));
            else
                signatures.push_back(in__.simplex_constrain(N));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  exposures;
        (void) exposures;  // dummy to suppress unused var warning
        if (jacobian__)
            exposures = in__.matrix_lb_constrain(0,M,n,lp__);
        else
            exposures = in__.matrix_lb_constrain(0,M,n);


        // transformed parameters
        validate_non_negative_index("sig_expo_opps", "M", M);
        validate_non_negative_index("sig_expo_opps", "N", N);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sig_expo_opps(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>(N));
        (void) sig_expo_opps;  // dummy to suppress unused var warning

        stan::math::initialize(sig_expo_opps, DUMMY_VAR__);
        stan::math::fill(sig_expo_opps,DUMMY_VAR__);


        try {
            {
                validate_non_negative_index("sig_mat", "n", n);
                validate_non_negative_index("sig_mat", "N", N);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sig_mat(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(N));
                (void) sig_mat;  // dummy to suppress unused var warning

                stan::math::initialize(sig_mat, DUMMY_VAR__);
                stan::math::fill(sig_mat,DUMMY_VAR__);


                for (int a = 1; a <= n; ++a) {

                    for (int j = 1; j <= N; ++j) {

                        stan::math::assign(get_base1_lhs(sig_mat,a,j,"sig_mat",1), get_base1(get_base1(signatures,a,"signatures",1),j,"signatures",2));
                    }
                }
                stan::math::assign(sig_expo_opps, elt_multiply(multiply(exposures,sig_mat),opps));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < M; ++i0__) {
            for (int i1__ = 0; i1__ < N; ++i1__) {
                if (stan::math::is_uninitialized(sig_expo_opps(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sig_expo_opps" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            for (int m = 1; m <= M; ++m) {

                lp_accum__.add(cauchy_log<propto__>(get_base1(exposures,m,"exposures",1), 0, 2.5));
            }
            for (int a = 1; a <= n; ++a) {

                lp_accum__.add(dirichlet_log<propto__>(get_base1(signatures,a,"signatures",1), alpha));
            }
            for (int m = 1; m <= M; ++m) {

                lp_accum__.add(poisson_log<propto__>(get_base1(counts,m,"counts",1), get_base1(sig_expo_opps,m,"sig_expo_opps",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("signatures");
        names__.push_back("exposures");
        names__.push_back("sig_expo_opps");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_sigfit_ext_emu_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> signatures;
        size_t dim_signatures_0__ = n;
        for (size_t k_0__ = 0; k_0__ < dim_signatures_0__; ++k_0__) {
            signatures.push_back(in__.simplex_constrain(N));
        }
        matrix_d exposures = in__.matrix_lb_constrain(0,M,n);
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
                vars__.push_back(signatures[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < n; ++k_1__) {
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
                vars__.push_back(exposures(k_0__, k_1__));
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("sig_expo_opps", "M", M);
        validate_non_negative_index("sig_expo_opps", "N", N);
        matrix_d sig_expo_opps(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>(N));
        (void) sig_expo_opps;  // dummy to suppress unused var warning

        stan::math::initialize(sig_expo_opps, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(sig_expo_opps,DUMMY_VAR__);


        try {
            {
                validate_non_negative_index("sig_mat", "n", n);
                validate_non_negative_index("sig_mat", "N", N);
                matrix_d sig_mat(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(N));
                (void) sig_mat;  // dummy to suppress unused var warning

                stan::math::initialize(sig_mat, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(sig_mat,DUMMY_VAR__);


                for (int a = 1; a <= n; ++a) {

                    for (int j = 1; j <= N; ++j) {

                        stan::math::assign(get_base1_lhs(sig_mat,a,j,"sig_mat",1), get_base1(get_base1(signatures,a,"signatures",1),j,"signatures",2));
                    }
                }
                stan::math::assign(sig_expo_opps, elt_multiply(multiply(exposures,sig_mat),opps));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
                vars__.push_back(sig_expo_opps(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "M", M);
        validate_non_negative_index("log_lik", "N", N);
        matrix_d log_lik(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>(N));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int m = 1; m <= M; ++m) {

                for (int j = 1; j <= N; ++j) {

                    stan::math::assign(get_base1_lhs(log_lik,m,j,"log_lik",1), poisson_log(get_base1(get_base1(counts,m,"counts",1),j,"counts",2),get_base1(sig_expo_opps,m,j,"sig_expo_opps",1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_1__ = 0; k_1__ < N; ++k_1__) {
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
                vars__.push_back(log_lik(k_0__, k_1__));
            }
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_sigfit_ext_emu";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "signatures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sig_expo_opps" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (N - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "signatures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sig_expo_opps" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= N; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_sigfit_ext_nmf_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sigfit_ext_nmf");
    reader.add_event(71, 71, "end", "model_sigfit_ext_nmf");
    return reader;
}

class model_sigfit_ext_nmf : public prob_grad {
private:
    int G;
    int C;
    int S;
    vector<vector<int> > counts;
    double exposures_prior_val;
    vector_d exposures_prior;
    vector_d signatures_prior;
public:
    model_sigfit_ext_nmf(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_sigfit_ext_nmf(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_sigfit_ext_nmf_namespace::model_sigfit_ext_nmf";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        context__.validate_dims("data initialization", "C", "int", context__.to_vec());
        C = int(0);
        vals_i__ = context__.vals_i("C");
        pos__ = 0;
        C = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        context__.validate_dims("data initialization", "counts", "int", context__.to_vec(G,C));
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        counts = std::vector<std::vector<int> >(G,std::vector<int>(C,int(0)));
        vals_i__ = context__.vals_i("counts");
        pos__ = 0;
        size_t counts_limit_1__ = C;
        for (size_t i_1__ = 0; i_1__ < counts_limit_1__; ++i_1__) {
            size_t counts_limit_0__ = G;
            for (size_t i_0__ = 0; i_0__ < counts_limit_0__; ++i_0__) {
                counts[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "exposures_prior_val", "double", context__.to_vec());
        exposures_prior_val = double(0);
        vals_r__ = context__.vals_r("exposures_prior_val");
        pos__ = 0;
        exposures_prior_val = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"C",C,1);
        check_greater_or_equal(function__,"S",S,1);
        for (int k0__ = 0; k0__ < G; ++k0__) {
            for (int k1__ = 0; k1__ < C; ++k1__) {
                check_greater_or_equal(function__,"counts[k0__][k1__]",counts[k0__][k1__],0);
            }
        }
        check_greater_or_equal(function__,"exposures_prior_val",exposures_prior_val,0);
        // initialize data variables
        validate_non_negative_index("exposures_prior", "S", S);
        exposures_prior = vector_d(static_cast<Eigen::VectorXd::Index>(S));
        stan::math::fill(exposures_prior,DUMMY_VAR__);
        validate_non_negative_index("signatures_prior", "C", C);
        signatures_prior = vector_d(static_cast<Eigen::VectorXd::Index>(C));
        stan::math::fill(signatures_prior,DUMMY_VAR__);

        try {
            for (int s = 1; s <= S; ++s) {

                stan::math::assign(get_base1_lhs(exposures_prior,s,"exposures_prior",1), exposures_prior_val);
            }
            for (int c = 1; c <= C; ++c) {

                stan::math::assign(get_base1_lhs(signatures_prior,c,"signatures_prior",1), 0.5);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("exposures", "S", S);
        validate_non_negative_index("exposures", "G", G);
        num_params_r__ += (S - 1) * G;
        validate_non_negative_index("signatures", "C", C);
        validate_non_negative_index("signatures", "S", S);
        num_params_r__ += (C - 1) * S;
    }

    ~model_sigfit_ext_nmf() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("exposures")))
            throw std::runtime_error("variable exposures missing");
        vals_r__ = context__.vals_r("exposures");
        pos__ = 0U;
        validate_non_negative_index("exposures", "G", G);
        validate_non_negative_index("exposures", "S", S);
        context__.validate_dims("initialization", "exposures", "vector_d", context__.to_vec(G,S));
        // generate_declaration exposures
        std::vector<vector_d> exposures(G,vector_d(static_cast<Eigen::VectorXd::Index>(S)));
        for (int j1__ = 0U; j1__ < S; ++j1__)
            for (int i0__ = 0U; i0__ < G; ++i0__)
                exposures[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try {
            writer__.simplex_unconstrain(exposures[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable exposures: ") + e.what());
        }

        if (!(context__.contains_r("signatures")))
            throw std::runtime_error("variable signatures missing");
        vals_r__ = context__.vals_r("signatures");
        pos__ = 0U;
        validate_non_negative_index("signatures", "S", S);
        validate_non_negative_index("signatures", "C", C);
        context__.validate_dims("initialization", "signatures", "vector_d", context__.to_vec(S,C));
        // generate_declaration signatures
        std::vector<vector_d> signatures(S,vector_d(static_cast<Eigen::VectorXd::Index>(C)));
        for (int j1__ = 0U; j1__ < C; ++j1__)
            for (int i0__ = 0U; i0__ < S; ++i0__)
                signatures[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < S; ++i0__)
            try {
            writer__.simplex_unconstrain(signatures[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable signatures: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > exposures;
        size_t dim_exposures_0__ = G;
        exposures.reserve(dim_exposures_0__);
        for (size_t k_0__ = 0; k_0__ < dim_exposures_0__; ++k_0__) {
            if (jacobian__)
                exposures.push_back(in__.simplex_constrain(S,lp__));
            else
                exposures.push_back(in__.simplex_constrain(S));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > signatures;
        size_t dim_signatures_0__ = S;
        signatures.reserve(dim_signatures_0__);
        for (size_t k_0__ = 0; k_0__ < dim_signatures_0__; ++k_0__) {
            if (jacobian__)
                signatures.push_back(in__.simplex_constrain(C,lp__));
            else
                signatures.push_back(in__.simplex_constrain(C));
        }


        // transformed parameters
        validate_non_negative_index("probabilities", "G", G);
        validate_non_negative_index("probabilities", "C", C);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  probabilities(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(C));
        (void) probabilities;  // dummy to suppress unused var warning

        stan::math::initialize(probabilities, DUMMY_VAR__);
        stan::math::fill(probabilities,DUMMY_VAR__);


        try {
            {
                validate_non_negative_index("exposuresMat", "G", G);
                validate_non_negative_index("exposuresMat", "S", S);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  exposuresMat(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(S));
                (void) exposuresMat;  // dummy to suppress unused var warning

                stan::math::initialize(exposuresMat, DUMMY_VAR__);
                stan::math::fill(exposuresMat,DUMMY_VAR__);
                validate_non_negative_index("signaturesMat", "S", S);
                validate_non_negative_index("signaturesMat", "C", C);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  signaturesMat(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(C));
                (void) signaturesMat;  // dummy to suppress unused var warning

                stan::math::initialize(signaturesMat, DUMMY_VAR__);
                stan::math::fill(signaturesMat,DUMMY_VAR__);


                for (int i = 1; i <= G; ++i) {

                    for (int j = 1; j <= S; ++j) {

                        stan::math::assign(get_base1_lhs(exposuresMat,i,j,"exposuresMat",1), get_base1(get_base1(exposures,i,"exposures",1),j,"exposures",2));
                    }
                }
                for (int i = 1; i <= S; ++i) {

                    for (int j = 1; j <= C; ++j) {

                        stan::math::assign(get_base1_lhs(signaturesMat,i,j,"signaturesMat",1), get_base1(get_base1(signatures,i,"signatures",1),j,"signatures",2));
                    }
                }
                stan::math::assign(probabilities, multiply(exposuresMat,signaturesMat));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < C; ++i1__) {
                if (stan::math::is_uninitialized(probabilities(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: probabilities" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"probabilities",probabilities,0);

        // model body
        try {

            for (int s = 1; s <= S; ++s) {

                lp_accum__.add(dirichlet_log<propto__>(get_base1(signatures,s,"signatures",1), signatures_prior));
            }
            for (int g = 1; g <= G; ++g) {

                lp_accum__.add(dirichlet_log<propto__>(get_base1(exposures,g,"exposures",1), exposures_prior));
                lp_accum__.add(multinomial_log<propto__>(get_base1(counts,g,"counts",1), to_vector(get_base1(probabilities,g,"probabilities",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("exposures");
        names__.push_back("signatures");
        names__.push_back("probabilities");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_sigfit_ext_nmf_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> exposures;
        size_t dim_exposures_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_exposures_0__; ++k_0__) {
            exposures.push_back(in__.simplex_constrain(S));
        }
        vector<vector_d> signatures;
        size_t dim_signatures_0__ = S;
        for (size_t k_0__ = 0; k_0__ < dim_signatures_0__; ++k_0__) {
            signatures.push_back(in__.simplex_constrain(C));
        }
        for (int k_1__ = 0; k_1__ < S; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(exposures[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
                vars__.push_back(signatures[k_0__][k_1__]);
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("probabilities", "G", G);
        validate_non_negative_index("probabilities", "C", C);
        matrix_d probabilities(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(C));
        (void) probabilities;  // dummy to suppress unused var warning

        stan::math::initialize(probabilities, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(probabilities,DUMMY_VAR__);


        try {
            {
                validate_non_negative_index("exposuresMat", "G", G);
                validate_non_negative_index("exposuresMat", "S", S);
                matrix_d exposuresMat(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(S));
                (void) exposuresMat;  // dummy to suppress unused var warning

                stan::math::initialize(exposuresMat, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(exposuresMat,DUMMY_VAR__);
                validate_non_negative_index("signaturesMat", "S", S);
                validate_non_negative_index("signaturesMat", "C", C);
                matrix_d signaturesMat(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(C));
                (void) signaturesMat;  // dummy to suppress unused var warning

                stan::math::initialize(signaturesMat, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(signaturesMat,DUMMY_VAR__);


                for (int i = 1; i <= G; ++i) {

                    for (int j = 1; j <= S; ++j) {

                        stan::math::assign(get_base1_lhs(exposuresMat,i,j,"exposuresMat",1), get_base1(get_base1(exposures,i,"exposures",1),j,"exposures",2));
                    }
                }
                for (int i = 1; i <= S; ++i) {

                    for (int j = 1; j <= C; ++j) {

                        stan::math::assign(get_base1_lhs(signaturesMat,i,j,"signaturesMat",1), get_base1(get_base1(signatures,i,"signatures",1),j,"signatures",2));
                    }
                }
                stan::math::assign(probabilities, multiply(exposuresMat,signaturesMat));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"probabilities",probabilities,0);

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(probabilities(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "G", G);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(G));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int g = 1; g <= G; ++g) {

                stan::math::assign(get_base1_lhs(log_lik,g,"log_lik",1), multinomial_log(get_base1(counts,g,"counts",1),to_vector(get_base1(probabilities,g,"probabilities",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_sigfit_ext_nmf";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= S; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "signatures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probabilities" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (S - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (C - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "signatures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probabilities" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_sigfit_fit_emu_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sigfit_fit_emu");
    reader.add_event(35, 35, "end", "model_sigfit_fit_emu");
    return reader;
}

class model_sigfit_fit_emu : public prob_grad {
private:
    int C;
    int S;
    int G;
    matrix_d signatures;
    vector<vector<int> > counts;
    vector_d alpha;
    vector<vector<int> > opps;
public:
    model_sigfit_fit_emu(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_sigfit_fit_emu(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_sigfit_fit_emu_namespace::model_sigfit_fit_emu";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "C", "int", context__.to_vec());
        C = int(0);
        vals_i__ = context__.vals_i("C");
        pos__ = 0;
        C = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        validate_non_negative_index("signatures", "S", S);
        validate_non_negative_index("signatures", "C", C);
        context__.validate_dims("data initialization", "signatures", "matrix_d", context__.to_vec(S,C));
        validate_non_negative_index("signatures", "S", S);
        validate_non_negative_index("signatures", "C", C);
        signatures = matrix_d(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(C));
        vals_r__ = context__.vals_r("signatures");
        pos__ = 0;
        size_t signatures_m_mat_lim__ = S;
        size_t signatures_n_mat_lim__ = C;
        for (size_t n_mat__ = 0; n_mat__ < signatures_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < signatures_m_mat_lim__; ++m_mat__) {
                signatures(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        context__.validate_dims("data initialization", "counts", "int", context__.to_vec(G,C));
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        counts = std::vector<std::vector<int> >(G,std::vector<int>(C,int(0)));
        vals_i__ = context__.vals_i("counts");
        pos__ = 0;
        size_t counts_limit_1__ = C;
        for (size_t i_1__ = 0; i_1__ < counts_limit_1__; ++i_1__) {
            size_t counts_limit_0__ = G;
            for (size_t i_0__ = 0; i_0__ < counts_limit_0__; ++i_0__) {
                counts[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        validate_non_negative_index("alpha", "S", S);
        context__.validate_dims("data initialization", "alpha", "vector_d", context__.to_vec(S));
        validate_non_negative_index("alpha", "S", S);
        alpha = vector_d(static_cast<Eigen::VectorXd::Index>(S));
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0;
        size_t alpha_i_vec_lim__ = S;
        for (size_t i_vec__ = 0; i_vec__ < alpha_i_vec_lim__; ++i_vec__) {
            alpha[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("opps", "G", G);
        validate_non_negative_index("opps", "C", C);
        context__.validate_dims("data initialization", "opps", "int", context__.to_vec(G,C));
        validate_non_negative_index("opps", "G", G);
        validate_non_negative_index("opps", "C", C);
        opps = std::vector<std::vector<int> >(G,std::vector<int>(C,int(0)));
        vals_i__ = context__.vals_i("opps");
        pos__ = 0;
        size_t opps_limit_1__ = C;
        for (size_t i_1__ = 0; i_1__ < opps_limit_1__; ++i_1__) {
            size_t opps_limit_0__ = G;
            for (size_t i_0__ = 0; i_0__ < opps_limit_0__; ++i_0__) {
                opps[i_0__][i_1__] = vals_i__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"C",C,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"alpha",alpha,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("exposure_probs", "S", S);
        validate_non_negative_index("exposure_probs", "G", G);
        num_params_r__ += (S - 1) * G;
        ++num_params_r__;
    }

    ~model_sigfit_fit_emu() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("exposure_probs")))
            throw std::runtime_error("variable exposure_probs missing");
        vals_r__ = context__.vals_r("exposure_probs");
        pos__ = 0U;
        validate_non_negative_index("exposure_probs", "G", G);
        validate_non_negative_index("exposure_probs", "S", S);
        context__.validate_dims("initialization", "exposure_probs", "vector_d", context__.to_vec(G,S));
        // generate_declaration exposure_probs
        std::vector<vector_d> exposure_probs(G,vector_d(static_cast<Eigen::VectorXd::Index>(S)));
        for (int j1__ = 0U; j1__ < S; ++j1__)
            for (int i0__ = 0U; i0__ < G; ++i0__)
                exposure_probs[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try {
            writer__.simplex_unconstrain(exposure_probs[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable exposure_probs: ") + e.what());
        }

        if (!(context__.contains_r("multiplier")))
            throw std::runtime_error("variable multiplier missing");
        vals_r__ = context__.vals_r("multiplier");
        pos__ = 0U;
        context__.validate_dims("initialization", "multiplier", "double", context__.to_vec());
        // generate_declaration multiplier
        double multiplier(0);
        multiplier = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,multiplier);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable multiplier: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > exposure_probs;
        size_t dim_exposure_probs_0__ = G;
        exposure_probs.reserve(dim_exposure_probs_0__);
        for (size_t k_0__ = 0; k_0__ < dim_exposure_probs_0__; ++k_0__) {
            if (jacobian__)
                exposure_probs.push_back(in__.simplex_constrain(S,lp__));
            else
                exposure_probs.push_back(in__.simplex_constrain(S));
        }

        T__ multiplier;
        (void) multiplier;  // dummy to suppress unused var warning
        if (jacobian__)
            multiplier = in__.scalar_lb_constrain(0,lp__);
        else
            multiplier = in__.scalar_lb_constrain(0);


        // transformed parameters
        validate_non_negative_index("exposures", "G", G);
        validate_non_negative_index("exposures", "S", S);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  exposures(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(S));
        (void) exposures;  // dummy to suppress unused var warning

        stan::math::initialize(exposures, DUMMY_VAR__);
        stan::math::fill(exposures,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                stan::math::assign(get_base1_lhs(exposures,i,"exposures",1), multiply(to_row_vector(get_base1(exposure_probs,i,"exposure_probs",1)),multiplier));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < S; ++i1__) {
                if (stan::math::is_uninitialized(exposures(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: exposures" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            {
                validate_non_negative_index("lambda", "G", G);
                validate_non_negative_index("lambda", "C", C);
                Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  lambda(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(C));
                (void) lambda;  // dummy to suppress unused var warning

                stan::math::initialize(lambda, DUMMY_VAR__);
                stan::math::fill(lambda,DUMMY_VAR__);


                stan::math::assign(lambda, elt_multiply(multiply(exposures,signatures),to_matrix(opps)));
                for (int i = 1; i <= G; ++i) {

                    lp_accum__.add(dirichlet_log<propto__>(get_base1(exposure_probs,i,"exposure_probs",1), alpha));
                }
                lp_accum__.add(cauchy_log<propto__>(multiplier, 0, 1));
                for (int i = 1; i <= G; ++i) {

                    lp_accum__.add(poisson_log<propto__>(get_base1(counts,i,"counts",1), get_base1(lambda,i,"lambda",1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("exposure_probs");
        names__.push_back("multiplier");
        names__.push_back("exposures");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(S);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_sigfit_fit_emu_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> exposure_probs;
        size_t dim_exposure_probs_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_exposure_probs_0__; ++k_0__) {
            exposure_probs.push_back(in__.simplex_constrain(S));
        }
        double multiplier = in__.scalar_lb_constrain(0);
        for (int k_1__ = 0; k_1__ < S; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(exposure_probs[k_0__][k_1__]);
            }
        }
        vars__.push_back(multiplier);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("exposures", "G", G);
        validate_non_negative_index("exposures", "S", S);
        matrix_d exposures(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(S));
        (void) exposures;  // dummy to suppress unused var warning

        stan::math::initialize(exposures, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(exposures,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                stan::math::assign(get_base1_lhs(exposures,i,"exposures",1), multiply(to_row_vector(get_base1(exposure_probs,i,"exposure_probs",1)),multiplier));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < S; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(exposures(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_sigfit_fit_emu";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= S; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposure_probs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "multiplier";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= S; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (S - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposure_probs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "multiplier";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= S; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_sigfit_fit_nmf_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sigfit_fit_nmf");
    reader.add_event(39, 39, "end", "model_sigfit_fit_nmf");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
scale_to_sum_1(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& v, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(v,sum(v)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct scale_to_sum_1_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& v, std::ostream* pstream__) const {
        return scale_to_sum_1(v, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
scale_row_to_sum_1(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& r, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(r,sum(r)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct scale_row_to_sum_1_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& r, std::ostream* pstream__) const {
        return scale_row_to_sum_1(r, pstream__);
    }
};

class model_sigfit_fit_nmf : public prob_grad {
private:
    int C;
    int S;
    int G;
    matrix_d signatures;
    vector<vector<int> > counts;
    vector_d alpha;
public:
    model_sigfit_fit_nmf(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_sigfit_fit_nmf(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_sigfit_fit_nmf_namespace::model_sigfit_fit_nmf";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "C", "int", context__.to_vec());
        C = int(0);
        vals_i__ = context__.vals_i("C");
        pos__ = 0;
        C = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        validate_non_negative_index("signatures", "C", C);
        validate_non_negative_index("signatures", "S", S);
        context__.validate_dims("data initialization", "signatures", "matrix_d", context__.to_vec(C,S));
        validate_non_negative_index("signatures", "C", C);
        validate_non_negative_index("signatures", "S", S);
        signatures = matrix_d(static_cast<Eigen::VectorXd::Index>(C),static_cast<Eigen::VectorXd::Index>(S));
        vals_r__ = context__.vals_r("signatures");
        pos__ = 0;
        size_t signatures_m_mat_lim__ = C;
        size_t signatures_n_mat_lim__ = S;
        for (size_t n_mat__ = 0; n_mat__ < signatures_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < signatures_m_mat_lim__; ++m_mat__) {
                signatures(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        context__.validate_dims("data initialization", "counts", "int", context__.to_vec(G,C));
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        counts = std::vector<std::vector<int> >(G,std::vector<int>(C,int(0)));
        vals_i__ = context__.vals_i("counts");
        pos__ = 0;
        size_t counts_limit_1__ = C;
        for (size_t i_1__ = 0; i_1__ < counts_limit_1__; ++i_1__) {
            size_t counts_limit_0__ = G;
            for (size_t i_0__ = 0; i_0__ < counts_limit_0__; ++i_0__) {
                counts[i_0__][i_1__] = vals_i__[pos__++];
            }
        }
        validate_non_negative_index("alpha", "S", S);
        context__.validate_dims("data initialization", "alpha", "vector_d", context__.to_vec(S));
        validate_non_negative_index("alpha", "S", S);
        alpha = vector_d(static_cast<Eigen::VectorXd::Index>(S));
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0;
        size_t alpha_i_vec_lim__ = S;
        for (size_t i_vec__ = 0; i_vec__ < alpha_i_vec_lim__; ++i_vec__) {
            alpha[i_vec__] = vals_r__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"C",C,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"alpha",alpha,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("exposures", "S", S);
        validate_non_negative_index("exposures", "G", G);
        num_params_r__ += (S - 1) * G;
    }

    ~model_sigfit_fit_nmf() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("exposures")))
            throw std::runtime_error("variable exposures missing");
        vals_r__ = context__.vals_r("exposures");
        pos__ = 0U;
        validate_non_negative_index("exposures", "G", G);
        validate_non_negative_index("exposures", "S", S);
        context__.validate_dims("initialization", "exposures", "vector_d", context__.to_vec(G,S));
        // generate_declaration exposures
        std::vector<vector_d> exposures(G,vector_d(static_cast<Eigen::VectorXd::Index>(S)));
        for (int j1__ = 0U; j1__ < S; ++j1__)
            for (int i0__ = 0U; i0__ < G; ++i0__)
                exposures[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try {
            writer__.simplex_unconstrain(exposures[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable exposures: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > exposures;
        size_t dim_exposures_0__ = G;
        exposures.reserve(dim_exposures_0__);
        for (size_t k_0__ = 0; k_0__ < dim_exposures_0__; ++k_0__) {
            if (jacobian__)
                exposures.push_back(in__.simplex_constrain(S,lp__));
            else
                exposures.push_back(in__.simplex_constrain(S));
        }


        // transformed parameters
        validate_non_negative_index("probs", "C", C);
        validate_non_negative_index("probs", "G", G);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > probs(G, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(C))));
        stan::math::initialize(probs, DUMMY_VAR__);
        stan::math::fill(probs,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                stan::math::assign(get_base1_lhs(probs,i,"probs",1), scale_to_sum_1(multiply(signatures,get_base1(exposures,i,"exposures",1)), pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < C; ++i1__) {
                if (stan::math::is_uninitialized(probs[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: probs" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        for (int k0__ = 0; k0__ < G; ++k0__) {
            check_greater_or_equal(function__,"probs[k0__]",probs[k0__],0);
            check_less_or_equal(function__,"probs[k0__]",probs[k0__],1);
        }

        // model body
        try {

            for (int i = 1; i <= G; ++i) {

                lp_accum__.add(dirichlet_log<propto__>(get_base1(exposures,i,"exposures",1), alpha));
                lp_accum__.add(multinomial_log<propto__>(get_base1(counts,i,"counts",1), get_base1(probs,i,"probs",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("exposures");
        names__.push_back("probs");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_sigfit_fit_nmf_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> exposures;
        size_t dim_exposures_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_exposures_0__; ++k_0__) {
            exposures.push_back(in__.simplex_constrain(S));
        }
        for (int k_1__ = 0; k_1__ < S; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(exposures[k_0__][k_1__]);
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("probs", "C", C);
        validate_non_negative_index("probs", "G", G);
        vector<vector_d> probs(G, (vector_d(static_cast<Eigen::VectorXd::Index>(C))));
        stan::math::initialize(probs, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(probs,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                stan::math::assign(get_base1_lhs(probs,i,"probs",1), scale_to_sum_1(multiply(signatures,get_base1(exposures,i,"exposures",1)), pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int k0__ = 0; k0__ < G; ++k0__) {
            check_greater_or_equal(function__,"probs[k0__]",probs[k0__],0);
            check_less_or_equal(function__,"probs[k0__]",probs[k0__],1);
        }

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(probs[k_0__][k_1__]);
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "G", G);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(G));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), multinomial_log(get_base1(counts,i,"counts",1),get_base1(probs,i,"probs",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_sigfit_fit_nmf";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= S; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (S - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_sigfit_fit_nmf_hier_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sigfit_fit_nmf_hier");
    reader.add_event(45, 45, "end", "model_sigfit_fit_nmf_hier");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
scale_to_sum_1(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& v, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(v,sum(v)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct scale_to_sum_1_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& v, std::ostream* pstream__) const {
        return scale_to_sum_1(v, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
scale_row_to_sum_1(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& r, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(divide(r,sum(r)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct scale_row_to_sum_1_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& r, std::ostream* pstream__) const {
        return scale_row_to_sum_1(r, pstream__);
    }
};

class model_sigfit_fit_nmf_hier : public prob_grad {
private:
    int C;
    int S;
    int G;
    matrix_d signatures;
    vector<vector<int> > counts;
    vector_d ones;
public:
    model_sigfit_fit_nmf_hier(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_sigfit_fit_nmf_hier(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_sigfit_fit_nmf_hier_namespace::model_sigfit_fit_nmf_hier";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "C", "int", context__.to_vec());
        C = int(0);
        vals_i__ = context__.vals_i("C");
        pos__ = 0;
        C = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        validate_non_negative_index("signatures", "C", C);
        validate_non_negative_index("signatures", "S", S);
        context__.validate_dims("data initialization", "signatures", "matrix_d", context__.to_vec(C,S));
        validate_non_negative_index("signatures", "C", C);
        validate_non_negative_index("signatures", "S", S);
        signatures = matrix_d(static_cast<Eigen::VectorXd::Index>(C),static_cast<Eigen::VectorXd::Index>(S));
        vals_r__ = context__.vals_r("signatures");
        pos__ = 0;
        size_t signatures_m_mat_lim__ = C;
        size_t signatures_n_mat_lim__ = S;
        for (size_t n_mat__ = 0; n_mat__ < signatures_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < signatures_m_mat_lim__; ++m_mat__) {
                signatures(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        context__.validate_dims("data initialization", "counts", "int", context__.to_vec(G,C));
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        counts = std::vector<std::vector<int> >(G,std::vector<int>(C,int(0)));
        vals_i__ = context__.vals_i("counts");
        pos__ = 0;
        size_t counts_limit_1__ = C;
        for (size_t i_1__ = 0; i_1__ < counts_limit_1__; ++i_1__) {
            size_t counts_limit_0__ = G;
            for (size_t i_0__ = 0; i_0__ < counts_limit_0__; ++i_0__) {
                counts[i_0__][i_1__] = vals_i__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"C",C,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"G",G,1);
        // initialize data variables
        validate_non_negative_index("ones", "S", S);
        ones = vector_d(static_cast<Eigen::VectorXd::Index>(S));
        stan::math::fill(ones,DUMMY_VAR__);

        try {
            for (int i = 1; i <= S; ++i) {
                stan::math::assign(get_base1_lhs(ones,i,"ones",1), 1);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("exposures", "S", S);
        validate_non_negative_index("exposures", "G", G);
        num_params_r__ += (S - 1) * G;
        validate_non_negative_index("alpha", "S", S);
        num_params_r__ += S;
    }

    ~model_sigfit_fit_nmf_hier() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("exposures")))
            throw std::runtime_error("variable exposures missing");
        vals_r__ = context__.vals_r("exposures");
        pos__ = 0U;
        validate_non_negative_index("exposures", "G", G);
        validate_non_negative_index("exposures", "S", S);
        context__.validate_dims("initialization", "exposures", "vector_d", context__.to_vec(G,S));
        // generate_declaration exposures
        std::vector<vector_d> exposures(G,vector_d(static_cast<Eigen::VectorXd::Index>(S)));
        for (int j1__ = 0U; j1__ < S; ++j1__)
            for (int i0__ = 0U; i0__ < G; ++i0__)
                exposures[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try {
            writer__.simplex_unconstrain(exposures[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable exposures: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "S", S);
        context__.validate_dims("initialization", "alpha", "vector_d", context__.to_vec(S));
        // generate_declaration alpha
        vector_d alpha(static_cast<Eigen::VectorXd::Index>(S));
        for (int j1__ = 0U; j1__ < S; ++j1__)
            alpha(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(1,1000,alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > exposures;
        size_t dim_exposures_0__ = G;
        exposures.reserve(dim_exposures_0__);
        for (size_t k_0__ = 0; k_0__ < dim_exposures_0__; ++k_0__) {
            if (jacobian__)
                exposures.push_back(in__.simplex_constrain(S,lp__));
            else
                exposures.push_back(in__.simplex_constrain(S));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  alpha;
        (void) alpha;  // dummy to suppress unused var warning
        if (jacobian__)
            alpha = in__.vector_lub_constrain(1,1000,S,lp__);
        else
            alpha = in__.vector_lub_constrain(1,1000,S);


        // transformed parameters
        validate_non_negative_index("probs", "C", C);
        validate_non_negative_index("probs", "G", G);
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > probs(G, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(C))));
        stan::math::initialize(probs, DUMMY_VAR__);
        stan::math::fill(probs,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                stan::math::assign(get_base1_lhs(probs,i,"probs",1), scale_to_sum_1(multiply(signatures,get_base1(exposures,i,"exposures",1)), pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < C; ++i1__) {
                if (stan::math::is_uninitialized(probs[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: probs" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        for (int k0__ = 0; k0__ < G; ++k0__) {
            check_greater_or_equal(function__,"probs[k0__]",probs[k0__],0);
            check_less_or_equal(function__,"probs[k0__]",probs[k0__],1);
        }

        // model body
        try {

            lp_accum__.add(uniform_log<propto__>(alpha, 1, 1000));
            for (int i = 1; i <= G; ++i) {

                lp_accum__.add(dirichlet_log<propto__>(get_base1(exposures,i,"exposures",1), alpha));
                lp_accum__.add(multinomial_log<propto__>(get_base1(counts,i,"counts",1), get_base1(probs,i,"probs",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("exposures");
        names__.push_back("alpha");
        names__.push_back("probs");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_sigfit_fit_nmf_hier_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> exposures;
        size_t dim_exposures_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_exposures_0__; ++k_0__) {
            exposures.push_back(in__.simplex_constrain(S));
        }
        vector_d alpha = in__.vector_lub_constrain(1,1000,S);
        for (int k_1__ = 0; k_1__ < S; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(exposures[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("probs", "C", C);
        validate_non_negative_index("probs", "G", G);
        vector<vector_d> probs(G, (vector_d(static_cast<Eigen::VectorXd::Index>(C))));
        stan::math::initialize(probs, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(probs,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                stan::math::assign(get_base1_lhs(probs,i,"probs",1), scale_to_sum_1(multiply(signatures,get_base1(exposures,i,"exposures",1)), pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int k0__ = 0; k0__ < G; ++k0__) {
            check_greater_or_equal(function__,"probs[k0__]",probs[k0__],0);
            check_less_or_equal(function__,"probs[k0__]",probs[k0__],1);
        }

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(probs[k_0__][k_1__]);
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "G", G);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(G));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), multinomial_log(get_base1(counts,i,"counts",1),get_base1(probs,i,"probs",1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_sigfit_fit_nmf_hier";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= S; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (S - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_sigfit_fitex_nmf_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sigfit_fitex_nmf");
    reader.add_event(56, 56, "end", "model_sigfit_fitex_nmf");
    return reader;
}

class model_sigfit_fitex_nmf : public prob_grad {
private:
    int C;
    int S;
    int G;
    int N;
    matrix_d fixed_sigs;
    vector<vector<int> > counts;
    int T;
    vector_d signature_prior;
    vector_d exposures_prior;
public:
    model_sigfit_fitex_nmf(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_sigfit_fitex_nmf(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_sigfit_fitex_nmf_namespace::model_sigfit_fitex_nmf";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "C", "int", context__.to_vec());
        C = int(0);
        vals_i__ = context__.vals_i("C");
        pos__ = 0;
        C = vals_i__[pos__++];
        context__.validate_dims("data initialization", "S", "int", context__.to_vec());
        S = int(0);
        vals_i__ = context__.vals_i("S");
        pos__ = 0;
        S = vals_i__[pos__++];
        context__.validate_dims("data initialization", "G", "int", context__.to_vec());
        G = int(0);
        vals_i__ = context__.vals_i("G");
        pos__ = 0;
        G = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        validate_non_negative_index("fixed_sigs", "S", S);
        validate_non_negative_index("fixed_sigs", "C", C);
        context__.validate_dims("data initialization", "fixed_sigs", "matrix_d", context__.to_vec(S,C));
        validate_non_negative_index("fixed_sigs", "S", S);
        validate_non_negative_index("fixed_sigs", "C", C);
        fixed_sigs = matrix_d(static_cast<Eigen::VectorXd::Index>(S),static_cast<Eigen::VectorXd::Index>(C));
        vals_r__ = context__.vals_r("fixed_sigs");
        pos__ = 0;
        size_t fixed_sigs_m_mat_lim__ = S;
        size_t fixed_sigs_n_mat_lim__ = C;
        for (size_t n_mat__ = 0; n_mat__ < fixed_sigs_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < fixed_sigs_m_mat_lim__; ++m_mat__) {
                fixed_sigs(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        context__.validate_dims("data initialization", "counts", "int", context__.to_vec(G,C));
        validate_non_negative_index("counts", "G", G);
        validate_non_negative_index("counts", "C", C);
        counts = std::vector<std::vector<int> >(G,std::vector<int>(C,int(0)));
        vals_i__ = context__.vals_i("counts");
        pos__ = 0;
        size_t counts_limit_1__ = C;
        for (size_t i_1__ = 0; i_1__ < counts_limit_1__; ++i_1__) {
            size_t counts_limit_0__ = G;
            for (size_t i_0__ = 0; i_0__ < counts_limit_0__; ++i_0__) {
                counts[i_0__][i_1__] = vals_i__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"C",C,1);
        check_greater_or_equal(function__,"S",S,1);
        check_greater_or_equal(function__,"G",G,1);
        check_greater_or_equal(function__,"N",N,1);
        // initialize data variables
        T = int(0);
        stan::math::fill(T, std::numeric_limits<int>::min());
        stan::math::assign(T,(S + N));
        validate_non_negative_index("signature_prior", "C", C);
        signature_prior = vector_d(static_cast<Eigen::VectorXd::Index>(C));
        stan::math::fill(signature_prior,DUMMY_VAR__);
        validate_non_negative_index("exposures_prior", "T", T);
        exposures_prior = vector_d(static_cast<Eigen::VectorXd::Index>(T));
        stan::math::fill(exposures_prior,DUMMY_VAR__);

        try {
            for (int c = 1; c <= C; ++c) {

                stan::math::assign(get_base1_lhs(signature_prior,c,"signature_prior",1), 0.5);
            }
            for (int s = 1; s <= T; ++s) {

                stan::math::assign(get_base1_lhs(exposures_prior,s,"exposures_prior",1), 0.5);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("extra_sigs", "C", C);
        validate_non_negative_index("extra_sigs", "N", N);
        num_params_r__ += (C - 1) * N;
        validate_non_negative_index("exposures", "T", T);
        validate_non_negative_index("exposures", "G", G);
        num_params_r__ += (T - 1) * G;
    }

    ~model_sigfit_fitex_nmf() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("extra_sigs")))
            throw std::runtime_error("variable extra_sigs missing");
        vals_r__ = context__.vals_r("extra_sigs");
        pos__ = 0U;
        validate_non_negative_index("extra_sigs", "N", N);
        validate_non_negative_index("extra_sigs", "C", C);
        context__.validate_dims("initialization", "extra_sigs", "vector_d", context__.to_vec(N,C));
        // generate_declaration extra_sigs
        std::vector<vector_d> extra_sigs(N,vector_d(static_cast<Eigen::VectorXd::Index>(C)));
        for (int j1__ = 0U; j1__ < C; ++j1__)
            for (int i0__ = 0U; i0__ < N; ++i0__)
                extra_sigs[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N; ++i0__)
            try {
            writer__.simplex_unconstrain(extra_sigs[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable extra_sigs: ") + e.what());
        }

        if (!(context__.contains_r("exposures")))
            throw std::runtime_error("variable exposures missing");
        vals_r__ = context__.vals_r("exposures");
        pos__ = 0U;
        validate_non_negative_index("exposures", "G", G);
        validate_non_negative_index("exposures", "T", T);
        context__.validate_dims("initialization", "exposures", "vector_d", context__.to_vec(G,T));
        // generate_declaration exposures
        std::vector<vector_d> exposures(G,vector_d(static_cast<Eigen::VectorXd::Index>(T)));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            for (int i0__ = 0U; i0__ < G; ++i0__)
                exposures[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < G; ++i0__)
            try {
            writer__.simplex_unconstrain(exposures[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable exposures: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > extra_sigs;
        size_t dim_extra_sigs_0__ = N;
        extra_sigs.reserve(dim_extra_sigs_0__);
        for (size_t k_0__ = 0; k_0__ < dim_extra_sigs_0__; ++k_0__) {
            if (jacobian__)
                extra_sigs.push_back(in__.simplex_constrain(C,lp__));
            else
                extra_sigs.push_back(in__.simplex_constrain(C));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > exposures;
        size_t dim_exposures_0__ = G;
        exposures.reserve(dim_exposures_0__);
        for (size_t k_0__ = 0; k_0__ < dim_exposures_0__; ++k_0__) {
            if (jacobian__)
                exposures.push_back(in__.simplex_constrain(T,lp__));
            else
                exposures.push_back(in__.simplex_constrain(T));
        }


        // transformed parameters
        validate_non_negative_index("extra_sigs_mat", "N", N);
        validate_non_negative_index("extra_sigs_mat", "C", C);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  extra_sigs_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(C));
        (void) extra_sigs_mat;  // dummy to suppress unused var warning

        stan::math::initialize(extra_sigs_mat, DUMMY_VAR__);
        stan::math::fill(extra_sigs_mat,DUMMY_VAR__);
        validate_non_negative_index("exposures_mat", "G", G);
        validate_non_negative_index("exposures_mat", "T", T);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  exposures_mat(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(T));
        (void) exposures_mat;  // dummy to suppress unused var warning

        stan::math::initialize(exposures_mat, DUMMY_VAR__);
        stan::math::fill(exposures_mat,DUMMY_VAR__);
        validate_non_negative_index("signatures", "T", T);
        validate_non_negative_index("signatures", "C", C);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  signatures(static_cast<Eigen::VectorXd::Index>(T),static_cast<Eigen::VectorXd::Index>(C));
        (void) signatures;  // dummy to suppress unused var warning

        stan::math::initialize(signatures, DUMMY_VAR__);
        stan::math::fill(signatures,DUMMY_VAR__);
        validate_non_negative_index("probabilities", "G", G);
        validate_non_negative_index("probabilities", "C", C);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  probabilities(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(C));
        (void) probabilities;  // dummy to suppress unused var warning

        stan::math::initialize(probabilities, DUMMY_VAR__);
        stan::math::fill(probabilities,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                for (int j = 1; j <= T; ++j) {

                    stan::math::assign(get_base1_lhs(exposures_mat,i,j,"exposures_mat",1), get_base1(get_base1(exposures,i,"exposures",1),j,"exposures",2));
                }
            }
            for (int i = 1; i <= N; ++i) {

                for (int j = 1; j <= C; ++j) {

                    stan::math::assign(get_base1_lhs(extra_sigs_mat,i,j,"extra_sigs_mat",1), get_base1(get_base1(extra_sigs,i,"extra_sigs",1),j,"extra_sigs",2));
                }
            }
            stan::math::assign(signatures, append_row(fixed_sigs,extra_sigs_mat));
            stan::math::assign(probabilities, multiply(exposures_mat,signatures));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < N; ++i0__) {
            for (int i1__ = 0; i1__ < C; ++i1__) {
                if (stan::math::is_uninitialized(extra_sigs_mat(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: extra_sigs_mat" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < T; ++i1__) {
                if (stan::math::is_uninitialized(exposures_mat(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: exposures_mat" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < T; ++i0__) {
            for (int i1__ = 0; i1__ < C; ++i1__) {
                if (stan::math::is_uninitialized(signatures(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: signatures" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < G; ++i0__) {
            for (int i1__ = 0; i1__ < C; ++i1__) {
                if (stan::math::is_uninitialized(probabilities(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: probabilities" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"probabilities",probabilities,0);

        // model body
        try {

            for (int n = 1; n <= N; ++n) {

                lp_accum__.add(dirichlet_log<propto__>(get_base1(extra_sigs,n,"extra_sigs",1), signature_prior));
            }
            for (int g = 1; g <= G; ++g) {

                lp_accum__.add(dirichlet_log<propto__>(get_base1(exposures,g,"exposures",1), exposures_prior));
                lp_accum__.add(multinomial_log<propto__>(get_base1(counts,g,"counts",1), to_vector(get_base1(probabilities,g,"probabilities",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("extra_sigs");
        names__.push_back("exposures");
        names__.push_back("extra_sigs_mat");
        names__.push_back("exposures_mat");
        names__.push_back("signatures");
        names__.push_back("probabilities");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_sigfit_fitex_nmf_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<vector_d> extra_sigs;
        size_t dim_extra_sigs_0__ = N;
        for (size_t k_0__ = 0; k_0__ < dim_extra_sigs_0__; ++k_0__) {
            extra_sigs.push_back(in__.simplex_constrain(C));
        }
        vector<vector_d> exposures;
        size_t dim_exposures_0__ = G;
        for (size_t k_0__ = 0; k_0__ < dim_exposures_0__; ++k_0__) {
            exposures.push_back(in__.simplex_constrain(T));
        }
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(extra_sigs[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < T; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(exposures[k_0__][k_1__]);
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("extra_sigs_mat", "N", N);
        validate_non_negative_index("extra_sigs_mat", "C", C);
        matrix_d extra_sigs_mat(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(C));
        (void) extra_sigs_mat;  // dummy to suppress unused var warning

        stan::math::initialize(extra_sigs_mat, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(extra_sigs_mat,DUMMY_VAR__);
        validate_non_negative_index("exposures_mat", "G", G);
        validate_non_negative_index("exposures_mat", "T", T);
        matrix_d exposures_mat(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(T));
        (void) exposures_mat;  // dummy to suppress unused var warning

        stan::math::initialize(exposures_mat, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(exposures_mat,DUMMY_VAR__);
        validate_non_negative_index("signatures", "T", T);
        validate_non_negative_index("signatures", "C", C);
        matrix_d signatures(static_cast<Eigen::VectorXd::Index>(T),static_cast<Eigen::VectorXd::Index>(C));
        (void) signatures;  // dummy to suppress unused var warning

        stan::math::initialize(signatures, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(signatures,DUMMY_VAR__);
        validate_non_negative_index("probabilities", "G", G);
        validate_non_negative_index("probabilities", "C", C);
        matrix_d probabilities(static_cast<Eigen::VectorXd::Index>(G),static_cast<Eigen::VectorXd::Index>(C));
        (void) probabilities;  // dummy to suppress unused var warning

        stan::math::initialize(probabilities, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(probabilities,DUMMY_VAR__);


        try {
            for (int i = 1; i <= G; ++i) {

                for (int j = 1; j <= T; ++j) {

                    stan::math::assign(get_base1_lhs(exposures_mat,i,j,"exposures_mat",1), get_base1(get_base1(exposures,i,"exposures",1),j,"exposures",2));
                }
            }
            for (int i = 1; i <= N; ++i) {

                for (int j = 1; j <= C; ++j) {

                    stan::math::assign(get_base1_lhs(extra_sigs_mat,i,j,"extra_sigs_mat",1), get_base1(get_base1(extra_sigs,i,"extra_sigs",1),j,"extra_sigs",2));
                }
            }
            stan::math::assign(signatures, append_row(fixed_sigs,extra_sigs_mat));
            stan::math::assign(probabilities, multiply(exposures_mat,signatures));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"probabilities",probabilities,0);

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(extra_sigs_mat(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < T; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(exposures_mat(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
                vars__.push_back(signatures(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < C; ++k_1__) {
            for (int k_0__ = 0; k_0__ < G; ++k_0__) {
                vars__.push_back(probabilities(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "G", G);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(G));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int g = 1; g <= G; ++g) {

                stan::math::assign(get_base1_lhs(log_lik,g,"log_lik",1), multinomial_log(get_base1(counts,g,"counts",1),to_vector(get_base1(probabilities,g,"probabilities",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < G; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_sigfit_fitex_nmf";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "extra_sigs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "extra_sigs_mat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures_mat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "signatures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probabilities" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= (C - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "extra_sigs" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (T - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "extra_sigs_mat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "exposures_mat" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "signatures" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= C; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "probabilities" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= G; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




#endif
